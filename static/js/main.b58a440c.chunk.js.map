{"version":3,"sources":["store/types.ts","store/actions/listActions.ts","store/actions/notificationActions.ts","../index.tsx","../App.tsx","components/Header.tsx","components/Notification.tsx","components/DeleteListModal.tsx","components/EditListModal.tsx","../MainContent.tsx","components/SelectList.tsx","components/AddNewTask.tsx","components/Tasks.tsx","components/EditTaskModal.tsx","components/DeleteTaskModal.tsx","store/reducers/listReducer.ts","store/reducers/notificationReducer.ts","store/store.ts","components/CreateNewList.tsx","components/Lists.tsx","components/Sidebar.tsx"],"names":["GET_LISTS","GET_LIST_BY_ID","ADD_LIST","DELETE_LIST","UPDATE_LIST","SET_LISTID_TO_DELETE","SET_LIST_TO_EDIT","SET_SELECTED_LIST","ADD_TASK","DELETE_TASK","SET_TASK_TO_DELETE","UNSET_TASK_TO_DELETE","UPDATE_TASK","SET_TASK_TO_EDIT","UNSET_TASK_TO_EDIT","SET_NOTIFICATION","addList","list","type","payload","getLists","getListById","id","setListIdToDelete","setListToEdit","setSelectedList","deleteList","updateList","name","addTask","task","setTaskToDelete","unsetTaskToDelete","deleteTask","setTaskToEdit","unsetTaskToEdit","updateTask","taskId","taskName","taskState","setNotification","msg","store_1","App_1","Header_1","Sidebar_1","Notification_1","Header","title","subtitle","className","timeout","Notification","dispatch","useDispatch","useSelector","state","notification","useEffect","clearTimeout","setTimeout","onClick","DeleteListModal","listId","listById","hideModalHandler","tasks","length","map","EditListModal","useState","listName","setListName","onSubmit","e","preventDefault","trim","alert","aria-label","placeholder","value","onChange","currentTarget","SelectList","lists","Object","keys","values","AddNewTask","setTaskName","newTask","Date","getTime","completed","Tasks","selectedList","tasksTable","setTaskToEditHandler","setTaskToDeleteHandler","EditTaskModal","taskToEdit","setTaskState","closeModalHandler","checked","DeleteTaskModal","taskToDelete","initialState","listIdToDelete","listToEdit","getListsFromLS","localStorage","getItem","JSON","parse","saveListsToLS","setItem","stringify","message","rootReducer","combineReducers","action","listsFromLS","copiedListsFromLS","copiedListsFromLS2","copiedListsFromLS3","copiedListsFromLS4","push","copiedListsFromLS5","copiedTasks","find","splice","indexOf","copiedListsFromLS6","copiedList","copiedTasks2","task2","copiedTask","updatedTasks","store","createStore","composeWithDevTools","CreateNewList","newList","Lists","Sidebar"],"mappings":"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","file":"static/js/main.b58a440c.chunk.js","sourcesContent":["export const GET_LISTS = 'GET_LISTS';\r\nexport const GET_LIST_BY_ID = 'GET_LIST_BY_ID';\r\nexport const ADD_LIST = 'ADD_LIST';\r\nexport const DELETE_LIST = 'DELETE_LIST';\r\nexport const UPDATE_LIST = 'UPDATE_LIST';\r\nexport const SET_LISTID_TO_DELETE = 'SET_LISTID_TO_DELETE';\r\nexport const SET_LIST_TO_EDIT = 'SET_LISTID_TO_EDIT';\r\nexport const SET_SELECTED_LIST = 'SET_SELECTED_LIST';\r\n\r\nexport const ADD_TASK = 'ADD_TASK';\r\nexport const DELETE_TASK = 'DELETE_TASK';\r\nexport const SET_TASK_TO_DELETE = 'SET_TASK_TO_DELETE';\r\nexport const UNSET_TASK_TO_DELETE = 'UNSET_TASK_TO_DELETE';\r\nexport const UPDATE_TASK = 'UPDATE_TASK';\r\nexport const SET_TASK_TO_EDIT = 'SET_TASK_TO_EDIT';\r\nexport const UNSET_TASK_TO_EDIT = 'UNSET_TASK_TO_EDIT';\r\n\r\nexport const SET_NOTIFICATION = 'SET_NOTIFICATION';\r\n\r\nexport interface Task {\r\n    name: string;\r\n    id: string;\r\n    completed: boolean;\r\n}\r\n\r\nexport interface List {\r\n    name: string;\r\n    id: string;\r\n    tasks: Task[];\r\n}\r\n\r\nexport interface Lists {\r\n    [id: string]: List\r\n}\r\n\r\n// Actions\r\ninterface AddListAction {\r\n    type: typeof ADD_LIST;\r\n    payload: List;\r\n}\r\n\r\ninterface GetListsAction {\r\n    type: typeof GET_LISTS;\r\n}\r\n\r\ninterface GetListByIdAction {\r\n    type: typeof GET_LIST_BY_ID;\r\n    payload: string;\r\n}\r\n\r\ninterface SetListIdToDeleteAction {\r\n    type: typeof SET_LISTID_TO_DELETE;\r\n    payload: string;\r\n}\r\n\r\ninterface SetListToEditAction {\r\n    type: typeof SET_LIST_TO_EDIT;\r\n    payload: string;\r\n}\r\n\r\ninterface DeleteListAction {\r\n    type: typeof DELETE_LIST;\r\n    payload: string;\r\n}\r\n\r\ninterface UpdateListAction {\r\n    type: typeof UPDATE_LIST;\r\n    payload: {\r\n        id: string;\r\n        name: string;\r\n    }\r\n}\r\n\r\ninterface SetSelectedListAction {\r\n    type: typeof SET_SELECTED_LIST;\r\n    payload: string;\r\n}\r\n\r\ninterface SetNotificationAction {\r\n    type: typeof SET_NOTIFICATION;\r\n    payload: {\r\n        msg: string;\r\n        type: string;\r\n    };\r\n}\r\n\r\ninterface AddTaskAction {\r\n    type: typeof ADD_TASK;\r\n    payload: {\r\n        task: Task;\r\n        list: List;\r\n    }\r\n}\r\n\r\ninterface DeleteTaskAction {\r\n    type: typeof DELETE_TASK;\r\n    payload: {\r\n        task: Task;\r\n        list: List;\r\n    };\r\n}\r\n\r\ninterface SetTaskToDeleteAction {\r\n    type: typeof SET_TASK_TO_DELETE;\r\n    payload: {\r\n        task: Task;\r\n        list: List;\r\n    };\r\n}\r\n\r\ninterface UnsetTaskToDeleteAction {\r\n    type: typeof UNSET_TASK_TO_DELETE;\r\n}\r\n\r\ninterface EditTaskAction {\r\n    type: typeof UPDATE_TASK;\r\n    payload: {\r\n        taskId: string;\r\n        taskName: string;\r\n        taskState: boolean;\r\n        list: List;\r\n    }\r\n}\r\n\r\ninterface SetTaskToEditAction {\r\n    type: typeof SET_TASK_TO_EDIT;\r\n    payload: {\r\n        task: Task;\r\n        list: List;\r\n    };\r\n}\r\n\r\ninterface UnsetTaskToEditAction {\r\n    type: typeof UNSET_TASK_TO_EDIT;\r\n}\r\n\r\nexport type ListsAction = AddListAction | GetListsAction | GetListByIdAction | SetListIdToDeleteAction |\r\n    SetListToEditAction | DeleteListAction | UpdateListAction | SetSelectedListAction | AddTaskAction | DeleteTaskAction |\r\n    SetTaskToDeleteAction | UnsetTaskToDeleteAction | EditTaskAction | SetTaskToEditAction | UnsetTaskToEditAction;\r\n\r\nexport type NotificationAction = SetNotificationAction;\r\n\r\nexport interface ListState {\r\n    lists: Lists;\r\n    listIdToDelete: string;\r\n    listToEdit: List | null;\r\n    listById: List | null;\r\n    selectedList: List | null;\r\n    taskToDelete: {\r\n        task: Task;\r\n        list: List;\r\n    } | null;\r\n    taskToEdit: {\r\n        task: Task;\r\n        list: List;\r\n    } | null;\r\n}\r\n\r\nexport interface NotificationState {\r\n    message: string;\r\n    type: string;\r\n}","import { \r\n  List, ListsAction, Task, ADD_LIST, GET_LISTS,  DELETE_LIST, SET_LISTID_TO_DELETE,\r\n  GET_LIST_BY_ID, SET_LIST_TO_EDIT, UPDATE_LIST, SET_SELECTED_LIST, \r\n  ADD_TASK, SET_TASK_TO_DELETE, DELETE_TASK, UNSET_TASK_TO_DELETE, SET_TASK_TO_EDIT, \r\n  UNSET_TASK_TO_EDIT, UPDATE_TASK\r\n} from '../types';\r\n\r\nexport const addList = (list: List): ListsAction => {\r\n  return {\r\n    type: ADD_LIST,\r\n    payload: list\r\n  }\r\n}\r\n\r\nexport const getLists = (): ListsAction => {\r\n  return {\r\n    type: GET_LISTS\r\n  }\r\n}\r\n\r\nexport const getListById = (id: string): ListsAction => {\r\n  return {\r\n    type: GET_LIST_BY_ID,\r\n    payload: id\r\n  }\r\n}\r\n\r\nexport const setListIdToDelete = (id: string): ListsAction => {\r\n  return {\r\n    type: SET_LISTID_TO_DELETE,\r\n    payload: id\r\n  }\r\n}\r\n\r\nexport const setListToEdit = (id: string): ListsAction => {\r\n  return {\r\n    type: SET_LIST_TO_EDIT,\r\n    payload: id\r\n  }\r\n}\r\n\r\nexport const setSelectedList = (id: string): ListsAction => {\r\n  return {\r\n    type: SET_SELECTED_LIST,\r\n    payload: id\r\n  }\r\n}\r\n\r\nexport const deleteList = (id: string): ListsAction => {\r\n  return {\r\n    type: DELETE_LIST,\r\n    payload: id\r\n  }\r\n}\r\n\r\nexport const updateList = (id: string, name: string): ListsAction => {\r\n  return {\r\n    type: UPDATE_LIST,\r\n    payload: {\r\n      id,\r\n      name\r\n    }\r\n  }\r\n}\r\n\r\nexport const addTask = (task: Task, list: List): ListsAction => {\r\n  return {\r\n    type: ADD_TASK,\r\n    payload: {\r\n      task,\r\n      list\r\n    }\r\n  }\r\n}\r\n\r\nexport const setTaskToDelete = (task: Task, list: List): ListsAction => {\r\n  return {\r\n    type: SET_TASK_TO_DELETE,\r\n    payload: {\r\n      task,\r\n      list\r\n    }\r\n  }\r\n}\r\n\r\nexport const unsetTaskToDelete = (): ListsAction => {\r\n  return {\r\n    type: UNSET_TASK_TO_DELETE\r\n  }\r\n}\r\n\r\nexport const deleteTask = (task: Task, list: List): ListsAction => {\r\n  return {\r\n    type: DELETE_TASK,\r\n    payload: {\r\n      task,\r\n      list\r\n    }\r\n  }\r\n}\r\n\r\nexport const setTaskToEdit = (task: Task, list: List): ListsAction => {\r\n  return {\r\n    type: SET_TASK_TO_EDIT,\r\n    payload: {\r\n      task,\r\n      list\r\n    }\r\n  }\r\n}\r\n\r\nexport const unsetTaskToEdit = (): ListsAction => {\r\n  return {\r\n    type: UNSET_TASK_TO_EDIT\r\n  }\r\n}\r\n\r\nexport const updateTask = (taskId: string, taskName: string, taskState: boolean, list: List): ListsAction => {\r\n  return {\r\n    type: UPDATE_TASK,\r\n    payload: {\r\n      taskId,\r\n      taskName,\r\n      taskState,\r\n      list\r\n    }\r\n  }\r\n}","import { SET_NOTIFICATION, NotificationAction } from '../types';\r\n\r\nexport const setNotification = (msg: string, type: string = 'success'): NotificationAction => {\r\n    return {\r\n        type: SET_NOTIFICATION,\r\n        payload: {\r\n            msg,\r\n            type\r\n        }\r\n    }\r\n}","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar React = require(\"react\");\r\nvar ReactDOM = require(\"react-dom\");\r\nvar react_redux_1 = require(\"react-redux\");\r\nrequire(\"../node_modules/bulma/css/bulma.min.css\");\r\nrequire(\"../node_modules/@fortawesome/fontawesome-free/css/all.min.css\");\r\nvar store_1 = require(\"./store/store\");\r\nvar App_1 = require(\"./App\");\r\nReactDOM.render(React.createElement(React.StrictMode, null,\r\n    React.createElement(react_redux_1.Provider, { store: store_1.default },\r\n        React.createElement(App_1.default, null))), document.getElementById('root'));\r\n//# sourceMappingURL=index.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar React = require(\"react\");\r\nvar react_redux_1 = require(\"react-redux\");\r\nrequire(\"./App.css\");\r\nvar Header_1 = require(\"./components/Header\");\r\nvar Sidebar_1 = require(\"./components/Sidebar\");\r\nvar Notification_1 = require(\"./components/Notification\");\r\nvar DeleteListModal_1 = require(\"./components/DeleteListModal\");\r\nvar EditListModal_1 = require(\"./components/EditListModal\");\r\nvar MainContent_1 = require(\"./components/MainContent\");\r\nvar EditTaskModal_1 = require(\"./components/EditTaskModal\");\r\nvar DeleteTaskModal_1 = require(\"./components/DeleteTaskModal\");\r\nvar App = function () {\r\n    var notificationMsg = react_redux_1.useSelector(function (state) { return state.notification.message; });\r\n    var listIdToDelete = react_redux_1.useSelector(function (state) { return state.list.listIdToDelete; });\r\n    var listToEdit = react_redux_1.useSelector(function (state) { return state.list.listToEdit; });\r\n    var taskToEdit = react_redux_1.useSelector(function (state) { return state.list.taskToEdit; });\r\n    var taskToDelete = react_redux_1.useSelector(function (state) { return state.list.taskToDelete; });\r\n    return (React.createElement(\"div\", { className: \"App\" },\r\n        React.createElement(Header_1.default, { title: \"Task List App\", subtitle: \"Create some lists and add some tasks to each list\" }),\r\n        React.createElement(\"div\", { className: \"container px-5\" },\r\n            React.createElement(\"div\", { className: \"columns\" },\r\n                React.createElement(Sidebar_1.default, null),\r\n                React.createElement(MainContent_1.default, null))),\r\n        React.createElement(Notification_1.default, { msg: notificationMsg }),\r\n        listIdToDelete && React.createElement(DeleteListModal_1.default, { listId: listIdToDelete }),\r\n        listToEdit && React.createElement(EditListModal_1.default, { list: listToEdit }),\r\n        taskToEdit && React.createElement(EditTaskModal_1.default, { taskToEdit: taskToEdit }),\r\n        taskToDelete && React.createElement(DeleteTaskModal_1.default, { taskToDelete: taskToDelete })));\r\n};\r\nexports.default = App;\r\n//# sourceMappingURL=App.js.map","import * as React from 'react';\r\nimport { FC } from 'react';\r\n\r\ninterface HeaderProps {\r\n  title: string;\r\n  subtitle?: string;\r\n}\r\n\r\nconst Header: FC<HeaderProps> = ({ title, subtitle }) => {\r\n  return (\r\n    <header className=\"hero has-text-centered is-dark is-bold mb-5\">\r\n      <div className=\"hero-body\">\r\n        <div className=\"container\">\r\n          <h1 className=\"title mb-3\">{title}</h1>\r\n          <h2 className=\"subtitle mt-0\">{subtitle}</h2>\r\n        </div>\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;","import * as React from 'react';\r\nimport { FC, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { setNotification } from '../store/actions';\r\nimport { RootState } from '../store/store';\r\n\r\ninterface NotificationProps {\r\n    msg: string;\r\n}\r\n\r\nlet timeout: ReturnType<typeof setTimeout>;\r\n\r\nconst Notification: FC<NotificationProps> = ({ msg }) => {\r\n    const dispatch = useDispatch();\r\n    const type = useSelector((state: RootState) => state.notification.type);\r\n\r\n    useEffect(() => {\r\n        if (msg !== '') {\r\n            if (timeout) {\r\n                clearTimeout(timeout);\r\n            }\r\n            timeout = setTimeout(() => {\r\n                dispatch(setNotification(''));\r\n            }, 3000);\r\n        }\r\n    }, [dispatch, msg]);\r\n\r\n    const closeNotification = () => {\r\n        dispatch(setNotification(''));\r\n        clearTimeout(timeout);\r\n    }\r\n\r\n    return (\r\n        <div className={msg ? `${type === 'danger' ? 'notification is-danger' : 'notification is-primary'}` : 'notification is-hidden'}>\r\n            <button className=\"delete\" onClick={closeNotification}></button>\r\n            <p>{msg}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Notification;","import * as React from 'react';\r\nimport { FC, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { setListIdToDelete, deleteList, getListById, setNotification } from '../store/actions';\r\nimport { RootState } from '../store/store';\r\n\r\ninterface DeleteListModalProps {\r\n    listId: string;\r\n}\r\n\r\nconst DeleteListModal: FC<DeleteListModalProps> = ({ listId }) => {\r\n    const dispatch = useDispatch();\r\n    const list = useSelector((state: RootState) => state.list.listById);\r\n\r\n    useEffect(() => {\r\n        dispatch(getListById(listId));\r\n    }, [dispatch, listId]);\r\n\r\n    const deleteListHandler = () => {\r\n        dispatch(deleteList(listId));\r\n        if (list) {\r\n            dispatch(setNotification(`List \"${list.name}\" deleted!`, 'danger'));\r\n        }\r\n    }\r\n\r\n    const hideModalHandler = () => {\r\n        dispatch(setListIdToDelete(''));\r\n    }\r\n\r\n    return (\r\n        <div className=\"modal is-active\">\r\n            <div className=\"modal-background close-modal\" onClick={hideModalHandler}></div>\r\n            <div className=\"modal-card\">\r\n                <header className=\"modal-card-head has-text-centered\">\r\n                    <p className=\"modal-card-title\">Are you sure you want to delete this list ?</p>\r\n                </header>\r\n                <div className=\"modal-card-body\">\r\n                    <h2 className=\"is-size-5 has-text-centered\">All tasks related to this list will be deleted</h2>\r\n                    <div className=\"content\">\r\n                        {list?.tasks.length === 0 ?\r\n                            <p className=\"has-text-centered pt-4 mb-0\">No tasks in this list!</p>\r\n                            :\r\n                            <ul>\r\n                                {list?.tasks.map(task => (\r\n                                    <li key={task.id}>{task.name}</li>\r\n                                ))}\r\n                            </ul>\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <footer className=\"modal-card-foot\">\r\n                    <button type=\"submit\" className=\"button is-danger\" onClick={deleteListHandler}>Delete</button>\r\n                    <button type=\"button\" className=\"button close-modal\" onClick={hideModalHandler}>Cancel</button>\r\n                </footer>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DeleteListModal;","import * as React from 'react';\r\nimport { FC, useState, FormEvent } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { setListToEdit, updateList, setNotification } from '../store/actions';\r\nimport { List } from '../store/types';\r\n\r\ninterface EditListModalProps {\r\n    list: List;\r\n}\r\n\r\nconst EditListModal: FC<EditListModalProps> = ({ list }) => {\r\n    const dispatch = useDispatch();\r\n    const [listName, setListName] = useState(list.name);\r\n\r\n    const hideModalHandler = () => {\r\n        dispatch(setListToEdit(''));\r\n    }\r\n\r\n    const changeHandler = (e: FormEvent<HTMLInputElement>) => {\r\n        setListName(e.currentTarget.value);\r\n    }\r\n\r\n    const submitHandler = (e: FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n\r\n        if (listName.trim() === '') {\r\n            return alert('List name is required!');\r\n        }\r\n\r\n        if (listName.trim() === list.name) {\r\n            return alert('List name is the same as before!');\r\n        }\r\n\r\n        dispatch(updateList(list.id, listName.trim()));\r\n        dispatch(setNotification(`List \"${list.name}\" updated!`));\r\n    }\r\n\r\n    return (\r\n        <div className=\"modal is-active\">\r\n            <div className=\"modal-background close-modal\" onClick={hideModalHandler}></div>\r\n            <form className=\"modal-card\" onSubmit={submitHandler}>\r\n                <header className=\"modal-card-head\">\r\n                    <p className=\"modal-card-title\">Edit List</p>\r\n                    <button type=\"button\" className=\"delete close-modal\" aria-label=\"close\" onClick={hideModalHandler}></button>\r\n                </header>\r\n                <div className=\"modal-card-body\">\r\n                    <div className=\"field\">\r\n                        <label className=\"label\">List Name</label>\r\n                        <div className=\"control\">\r\n                            <input type=\"text\" className=\"input\" name=\"listname\" placeholder=\"List Name\" value={listName} onChange={changeHandler} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <footer className=\"modal-card-foot\">\r\n                    <button type=\"submit\" className=\"button is-success\">Save changes</button>\r\n                    <button type=\"button\" className=\"button close-modal\" onClick={hideModalHandler}>Cancel</button>\r\n                </footer>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EditListModal;","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar React = require(\"react\");\r\nvar react_1 = require(\"react\");\r\nvar react_redux_1 = require(\"react-redux\");\r\nvar SelectList_1 = require(\"./SelectList\");\r\nvar AddNewTask_1 = require(\"./AddNewTask\");\r\nvar Tasks_1 = require(\"./Tasks\");\r\nvar MainContent = function () {\r\n    var selectedList = react_redux_1.useSelector(function (state) { return state.list.selectedList; });\r\n    return (React.createElement(\"div\", { className: \"column is-9\" },\r\n        React.createElement(\"div\", { className: \"box\" },\r\n            React.createElement(SelectList_1.default, null),\r\n            selectedList &&\r\n                React.createElement(react_1.Fragment, null,\r\n                    React.createElement(AddNewTask_1.default, { list: selectedList }),\r\n                    React.createElement(\"hr\", null),\r\n                    React.createElement(Tasks_1.default, { tasks: selectedList.tasks })))));\r\n};\r\nexports.default = MainContent;\r\n//# sourceMappingURL=MainContent.js.map","import * as React from 'react';\r\nimport { FC, FormEvent } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { List } from '../store/types';\r\nimport { setSelectedList } from '../store/actions';\r\nimport { RootState } from '../store/store';\r\n\r\nconst SelectList: FC = () => {\r\n    const dispatch = useDispatch();\r\n    const lists = useSelector((state: RootState) => state.list.lists);\r\n\r\n    const selectChangeHandler = (e: FormEvent<HTMLSelectElement>) => {\r\n        dispatch(setSelectedList(e.currentTarget.value));\r\n    }\r\n\r\n    return (\r\n        <section>\r\n            <h2 className=\"is-size-4 has-text-centered mb-4\">Choose a list</h2>\r\n            <div className=\"field mb-5\">\r\n                <div className=\"control has-icons-left\">\r\n                    <div className=\"select fullwidth\">\r\n                        <select className=\"fullwidth\" onChange={selectChangeHandler}>\r\n                            <option value=\"\">Select List</option>\r\n                            {Object.keys(lists).length > 0 &&\r\n                                Object.values(lists).map((list: List) => (\r\n                                    <option key={list.id} value={list.id}>{list.name}</option>\r\n                                ))\r\n                            }\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-list\"></i>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default SelectList;","import * as React from 'react';\r\nimport { FC, useState, FormEvent } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { List, Task } from '../store/types';\r\nimport { addTask, setNotification } from '../store/actions';\r\n\r\ninterface AddNewTaskProps {\r\n    list: List;\r\n}\r\n\r\nconst AddNewTask: FC<AddNewTaskProps> = ({ list }) => {\r\n    const dispatch = useDispatch();\r\n    const [taskName, setTaskName] = useState('');\r\n\r\n    const changeHandler = (e: FormEvent<HTMLInputElement>) => {\r\n        setTaskName(e.currentTarget.value);\r\n    }\r\n\r\n    const submitHandler = (e: FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n\r\n        if (taskName.trim() === '') {\r\n            return alert('Task name is required!');\r\n        }\r\n\r\n        const newTask: Task = {\r\n            name: taskName,\r\n            id: `task-${new Date().getTime()}`,\r\n            completed: false\r\n        }\r\n\r\n        dispatch(addTask(newTask, list));\r\n        dispatch(setNotification(`New task created(\"${newTask.name}\")!`));\r\n        setTaskName('');\r\n    }\r\n\r\n    return (\r\n        <section className=\"section\">\r\n            <h2 className=\"is-size-4 has-text-centered\">Add new task to selected field</h2>\r\n            <form onSubmit={submitHandler}>\r\n                <div className=\"field\">\r\n                    <label className=\"label\">Task Name</label>\r\n                    <div className=\"control\">\r\n                        <input type=\"text\" className=\"input\" placeholder=\"Add Task\" value={taskName} onChange={changeHandler} />\r\n                    </div>\r\n                    <div className=\"control mt-4\">\r\n                        <input type=\"submit\" value=\"Add New Task\" className=\"button is-primary\" />\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default AddNewTask;","import * as React from 'react';\r\nimport { FC } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { Task } from '../store/types';\r\nimport { setTaskToDelete, setTaskToEdit } from '../store/actions';\r\nimport { RootState } from '../store/store';\r\n\r\ninterface TasksProps {\r\n    tasks: Task[];\r\n}\r\n\r\nconst Tasks: FC<TasksProps> = ({ tasks }) => {\r\n    const dispatch = useDispatch();\r\n    const list = useSelector((state: RootState) => state.list.selectedList!);\r\n\r\n    const setTaskToDeleteHandler = (task: Task) => {\r\n        dispatch(setTaskToDelete(task, list));\r\n    }\r\n\r\n    const setTaskToEditHandler = (task: Task) => {\r\n        dispatch(setTaskToEdit(task, list));\r\n    }\r\n\r\n    const tasksTable = (\r\n        <table id=\"tasks-table\" className=\"table is-fullwidth is-striped\">\r\n            <thead>\r\n                <tr>\r\n                    <th>Task</th>\r\n                    <th className=\"has-text-centered\">Edit</th>\r\n                    <th className=\"has-text-centered\">Delete</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {tasks.map((task: Task) => (\r\n                    <tr key={task.id} className={task.completed ? 'completed' : ''}>\r\n                        <td>{task.name}</td>\r\n                        <td className=\"has-text-centered\">\r\n                            <button className=\"button is-primary is-small\" onClick={() => setTaskToEditHandler(task)}>\r\n                                <span className=\"icon\">\r\n                                    <i className=\"fas fa-edit\"></i>\r\n                                </span>\r\n                            </button>\r\n                        </td>\r\n                        <td className=\"has-text-centered\">\r\n                            <button className=\"button is-danger is-small\" onClick={() => setTaskToDeleteHandler(task)}>\r\n                                <span className=\"icon\">\r\n                                    <i className=\"fas fa-times\"></i>\r\n                                </span>\r\n                            </button>\r\n                        </td>\r\n                    </tr>\r\n                ))}\r\n            </tbody>\r\n        </table>\r\n    );\r\n\r\n    return (\r\n        <section className=\"section\">\r\n            <h2 className=\"is-size-4 has-text-centered\">List of tasks in selected list</h2>\r\n            {tasks.length === 0 ? <p id=\"no-tasks\" className=\"py-4 has-text-centered\">No Tasks</p> : tasksTable}\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default Tasks;","import * as React from 'react';\r\nimport { FC, FormEvent, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { Task, List } from '../store/types';\r\nimport { updateTask, unsetTaskToEdit, setNotification } from '../store/actions';\r\n\r\ninterface EditTaskModalProps {\r\n    taskToEdit: {\r\n        task: Task;\r\n        list: List;\r\n    }\r\n}\r\n\r\nconst EditTaskModal: FC<EditTaskModalProps> = ({ taskToEdit: { task, list } }) => {\r\n    const dispatch = useDispatch();\r\n    const [taskName, setTaskName] = useState(task.name);\r\n    const [taskState, setTaskState] = useState(task.completed);\r\n\r\n    const nameChangeHandler = (e: FormEvent<HTMLInputElement>) => {\r\n        setTaskName(e.currentTarget.value);\r\n    }\r\n\r\n    const stateChangeHandler = (e: FormEvent<HTMLInputElement>) => {\r\n        setTaskState(e.currentTarget.checked);\r\n    }\r\n\r\n    const submitHandler = (e: FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n\r\n        if (taskName === '') {\r\n            return alert('Task name is required!');\r\n        }\r\n\r\n        if (taskName === task.name && taskState === task.completed) {\r\n            return alert('Task name and state are same as before!');\r\n        }\r\n\r\n        dispatch(updateTask(task.id, taskName, taskState, list));\r\n        dispatch(setNotification(`Task \"${task.name}\" updated!`));\r\n    }\r\n\r\n    const closeModalHandler = () => {\r\n        dispatch(unsetTaskToEdit());\r\n    }\r\n\r\n    return (\r\n        <div className=\"modal is-active\">\r\n            <div className=\"modal-background close-modal\" onClick={closeModalHandler}></div>\r\n            <form className=\"modal-card\" onSubmit={submitHandler}>\r\n                <header className=\"modal-card-head\">\r\n                    <p className=\"modal-card-title\">Edit Task</p>\r\n                    <button type=\"button\" className=\"delete modal-close\" aria-label=\"close\" onClick={closeModalHandler}></button>\r\n                </header>\r\n                <div className=\"modal-card-body\">\r\n                    <div className=\"field\">\r\n                        <label className=\"label\">Task Name</label>\r\n                        <div className=\"control\">\r\n                            <input type=\"text\" className=\"input\" name=\"taskname\" placeholder=\"Task Name\" value={taskName} onChange={nameChangeHandler} />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"field\">\r\n                        <label className=\"label\">Complete task</label>\r\n                        <label className=\"checkbox\">\r\n                            <input type=\"checkbox\" name=\"taskstate\" checked={taskState} onChange={stateChangeHandler} />\r\n                            {' '}Complete\r\n          </label>\r\n                    </div>\r\n                </div>\r\n                <footer className=\"modal-card-foot\">\r\n                    <button type=\"submit\" className=\"button is-success\">Save changes</button>\r\n                    <button type=\"button\" className=\"button close-modal\" onClick={closeModalHandler}>Cancel</button>\r\n                </footer>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EditTaskModal;","import * as React from 'react';\r\nimport { FC } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { Task, List } from '../store/types';\r\nimport { unsetTaskToDelete, deleteTask, setNotification } from '../store/actions';\r\n\r\ninterface DeleteTaskModalProps {\r\n    taskToDelete: {\r\n        task: Task;\r\n        list: List;\r\n    }\r\n}\r\n\r\nconst DeleteTaskModal: FC<DeleteTaskModalProps> = ({ taskToDelete: { task, list } }) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const deleteHandler = () => {\r\n        dispatch(deleteTask(task, list));\r\n        dispatch(setNotification(`Task \"${task.name}\" deleted!`, 'danger'));\r\n    }\r\n\r\n    const closeModalHandler = () => {\r\n        dispatch(unsetTaskToDelete());\r\n    }\r\n\r\n    return (\r\n        <div className=\"modal is-active\">\r\n            <div className=\"modal-background close-modal\" onClick={closeModalHandler}></div>\r\n            <div className=\"modal-card\">\r\n                <header className=\"modal-card-head has-text-centered\">\r\n                    <p className=\"modal-card-title\">Are you sure you want to delete this task ?</p>\r\n                </header>\r\n                <footer className=\"modal-card-foot\">\r\n                    <button type=\"submit\" className=\"button is-danger\" onClick={deleteHandler}>Delete</button>\r\n                    <button type=\"button\" className=\"button close-modal\" onClick={closeModalHandler}>Cancel</button>\r\n                </footer>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DeleteTaskModal;","import {\r\n    ListState, ListsAction, Lists, ADD_LIST, GET_LISTS,\r\n    SET_LISTID_TO_DELETE, DELETE_LIST, GET_LIST_BY_ID,\r\n    SET_LIST_TO_EDIT, UPDATE_LIST, SET_SELECTED_LIST,\r\n    ADD_TASK, DELETE_TASK, SET_TASK_TO_DELETE, UNSET_TASK_TO_DELETE,\r\n    SET_TASK_TO_EDIT, UNSET_TASK_TO_EDIT, UPDATE_TASK\r\n} from '../types';\r\n\r\nconst initialState: ListState = {\r\n    lists: {},\r\n    listIdToDelete: '',\r\n    listToEdit: null,\r\n    listById: null,\r\n    selectedList: null,\r\n    taskToDelete: null,\r\n    taskToEdit: null\r\n}\r\n\r\nconst getListsFromLS = (): Lists => {\r\n    if (localStorage.getItem('task_list')) {\r\n        return JSON.parse(localStorage.getItem('task_list') || '{}');\r\n    }\r\n\r\n    return {};\r\n}\r\n\r\nconst saveListsToLS = (lists: Lists) => {\r\n    localStorage.setItem('task_list', JSON.stringify(lists));\r\n}\r\n\r\nexport default (state = initialState, action: ListsAction): ListState => {\r\n    const listsFromLS = getListsFromLS();\r\n\r\n    switch (action.type) {\r\n        case ADD_LIST:\r\n            const copiedListsFromLS = { ...listsFromLS };\r\n            copiedListsFromLS[action.payload.id] = action.payload;\r\n            saveListsToLS(copiedListsFromLS);\r\n            return {\r\n                ...state,\r\n                lists: copiedListsFromLS\r\n            };\r\n\r\n        case GET_LISTS:\r\n            return {\r\n                ...state,\r\n                lists: listsFromLS\r\n            }\r\n\r\n        case GET_LIST_BY_ID:\r\n            const list = listsFromLS[action.payload];\r\n            return {\r\n                ...state,\r\n                listById: list\r\n            }\r\n\r\n        case SET_LISTID_TO_DELETE:\r\n            return {\r\n                ...state,\r\n                listIdToDelete: action.payload\r\n            }\r\n\r\n        case SET_LIST_TO_EDIT:\r\n            const listToEdit = listsFromLS[action.payload] || null;\r\n            return {\r\n                ...state,\r\n                listToEdit: listToEdit\r\n            }\r\n\r\n        case DELETE_LIST:\r\n            const copiedListsFromLS2 = { ...listsFromLS };\r\n            const listId = copiedListsFromLS2[action.payload].id;\r\n            delete copiedListsFromLS2[action.payload];\r\n            saveListsToLS(copiedListsFromLS2);\r\n            return {\r\n                ...state,\r\n                lists: copiedListsFromLS2,\r\n                listIdToDelete: '',\r\n                listById: null,\r\n                selectedList: state.selectedList && listId === state.selectedList.id ? null : state.selectedList\r\n            }\r\n\r\n        case UPDATE_LIST:\r\n            const copiedListsFromLS3 = { ...listsFromLS };\r\n            copiedListsFromLS3[action.payload.id].name = action.payload.name;\r\n            saveListsToLS(copiedListsFromLS3);\r\n            return {\r\n                ...state,\r\n                lists: copiedListsFromLS3,\r\n                listToEdit: null\r\n            }\r\n\r\n        case SET_SELECTED_LIST:\r\n            const selectedList = getListsFromLS()[action.payload];\r\n            return {\r\n                ...state,\r\n                selectedList: selectedList\r\n            }\r\n\r\n        case ADD_TASK:\r\n            const copiedListsFromLS4 = { ...listsFromLS };\r\n            copiedListsFromLS4[action.payload.list.id].tasks.push(action.payload.task);\r\n            saveListsToLS(copiedListsFromLS4);\r\n            return {\r\n                ...state,\r\n                lists: copiedListsFromLS4,\r\n                selectedList: copiedListsFromLS4[action.payload.list.id]\r\n            }\r\n\r\n        case SET_TASK_TO_DELETE:\r\n            return {\r\n                ...state,\r\n                taskToDelete: {\r\n                    task: action.payload.task,\r\n                    list: action.payload.list\r\n                }\r\n            }\r\n\r\n        case UNSET_TASK_TO_DELETE:\r\n            return {\r\n                ...state,\r\n                taskToDelete: null\r\n            }\r\n\r\n        case DELETE_TASK:\r\n            const copiedListsFromLS5 = { ...listsFromLS };\r\n            const copiedTasks = [...copiedListsFromLS5[state.taskToDelete!.list.id].tasks];\r\n            const task = copiedTasks.find(task => task.id === state.taskToDelete!.task.id);\r\n            copiedTasks.splice(copiedTasks.indexOf(task!), 1);\r\n            copiedListsFromLS5[state.taskToDelete!.list.id].tasks = copiedTasks;\r\n            saveListsToLS(copiedListsFromLS5);\r\n            return {\r\n                ...state,\r\n                lists: copiedListsFromLS5,\r\n                selectedList: copiedListsFromLS5[state.taskToDelete!.list.id],\r\n                taskToDelete: null\r\n            }\r\n\r\n        case SET_TASK_TO_EDIT:\r\n            return {\r\n                ...state,\r\n                taskToEdit: {\r\n                    task: action.payload.task,\r\n                    list: action.payload.list\r\n                }\r\n            }\r\n\r\n        case UNSET_TASK_TO_EDIT:\r\n            return {\r\n                ...state,\r\n                taskToEdit: null\r\n            }\r\n\r\n        case UPDATE_TASK:\r\n            const copiedListsFromLS6 = { ...listsFromLS };\r\n            const copiedList = { ...copiedListsFromLS6[action.payload.list.id] };\r\n            const copiedTasks2 = [...copiedList.tasks];\r\n            const task2 = copiedTasks2.find((task) => task.id === action.payload.taskId);\r\n            const copiedTask = { ...task2! };\r\n            copiedTask.name = action.payload.taskName;\r\n            copiedTask.completed = action.payload.taskState;\r\n            const updatedTasks = copiedTasks2.map(task => task.id === copiedTask.id ? copiedTask : task);\r\n            copiedList.tasks = updatedTasks;\r\n            copiedListsFromLS6[copiedList.id] = copiedList;\r\n            saveListsToLS(copiedListsFromLS6);\r\n\r\n            return {\r\n                ...state,\r\n                lists: copiedListsFromLS6,\r\n                selectedList: copiedList,\r\n                taskToEdit: null\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import { SET_NOTIFICATION, NotificationAction, NotificationState } from '../types';\r\n\r\nconst initialState: NotificationState = {\r\n    message: '',\r\n    type: 'success'\r\n}\r\n\r\nexport default (state = initialState, action: NotificationAction): NotificationState => {\r\n    switch (action.type) {\r\n        case SET_NOTIFICATION:\r\n            return {\r\n                ...state,\r\n                message: action.payload.msg,\r\n                type: action.payload.type\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import { createStore, combineReducers } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nimport listReducer from './reducers/listReducer';\r\nimport notificationReducer from './reducers/notificationReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    list: listReducer,\r\n    notification: notificationReducer\r\n});\r\n\r\nconst store = createStore(rootReducer, composeWithDevTools());\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\nexport default store;","import * as React from 'react';\r\nimport { FC, FormEvent, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { addList, setNotification } from '../store/actions';\r\nimport { List } from '../store/types';\r\n\r\nconst CreateNewList: FC = () => {\r\n    const dispatch = useDispatch();\r\n    const [listName, setListName] = useState<string>('');\r\n\r\n    const inputChangeHandler = (e: FormEvent<HTMLInputElement>) => {\r\n        setListName(e.currentTarget.value);\r\n    }\r\n\r\n    const submitHandler = (e: FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n\r\n        if (listName === '') {\r\n            return alert('List name is required!');\r\n        }\r\n\r\n        const newList: List = {\r\n            id: `list-${new Date().getTime()}`,\r\n            name: listName,\r\n            tasks: []\r\n        };\r\n\r\n        dispatch(addList(newList));\r\n        dispatch(setNotification(`New list(\"${newList.name}\") created`));\r\n        setListName('');\r\n    }\r\n\r\n    return (\r\n        <div className=\"card mb-5\">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">Create New List</p>\r\n            </div>\r\n            <div className=\"card-content\">\r\n                <form onSubmit={submitHandler}>\r\n                    <div className=\"field\">\r\n                        <label className=\"label\">List Name</label>\r\n                        <div className=\"control\">\r\n                            <input\r\n                                className=\"input\"\r\n                                type=\"text\"\r\n                                placeholder=\"List Name\"\r\n                                name=\"listname\"\r\n                                value={listName}\r\n                                onChange={inputChangeHandler}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"control\">\r\n                        <button type=\"submit\" className=\"button is-primary\">Create</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CreateNewList;","import * as React from 'react';\r\nimport { FC, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getLists, setListIdToDelete, setListToEdit } from '../store/actions';\r\nimport { RootState } from '../store/store';\r\nimport { List } from '../store/types';\r\n\r\nconst Lists: FC = () => {\r\n    const dispatch = useDispatch();\r\n    const lists = useSelector((state: RootState) => state.list.lists);\r\n\r\n    useEffect(() => {\r\n        dispatch(getLists());\r\n    }, [dispatch]);\r\n\r\n    const setListIdToDeleteHandler = (id: string) => {\r\n        dispatch(setListIdToDelete(id));\r\n    }\r\n\r\n    const setListToEditHandler = (id: string) => {\r\n        dispatch(setListToEdit(id));\r\n    }\r\n\r\n    return (\r\n        <div className= \"panel is-primary\" >\r\n        <p className=\"panel-heading\" > Your lists </p>\r\n            < div id = \"lists-wrapper\" >\r\n                {\r\n                    Object.keys(lists).length === 0\r\n                        ?\r\n                        <p id=\"no-lists\" className = \"py-4 has-text-centered\" > No Lists</ p >\r\n          :\r\n<div id=\"task-lists\" >\r\n{\r\n    Object.values(lists).map((list: List) => {\r\n        return <div className=\"panel-block py-3\" key = { list.id } >\r\n            <p onClick={ () => setListToEditHandler(list.id) }> { list.name } </p>\r\n                <span className = \"panel-icon has-text-danger\" onClick = {() => setListIdToDeleteHandler(list.id)\r\n    }>\r\n    <i className=\"fas fa-times-circle\" > </i>\r\n    </span>\r\n    </div>\r\n              })}\r\n</div>\r\n        }\r\n</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Lists;","import * as React from 'react';\r\nimport { FC } from 'react';\r\n\r\nimport CreateNewList from './CreateNewList';\r\nimport Lists from './Lists';\r\n\r\nconst Sidebar: FC = () => {\r\n    return (\r\n        <div className=\"column is-3\">\r\n            <CreateNewList />\r\n            <Lists />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Sidebar;"],"sourceRoot":""}
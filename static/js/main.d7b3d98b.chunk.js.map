{"version":3,"sources":["components/Notification.tsx","store/types.ts","store/reducers/listReducer.ts","store/reducers/notificationReducer.ts","store/store.ts","components/Header.tsx","store/actions/listActions.ts","store/actions/notificationActions.ts","components/CreateNewList.tsx","components/Lists.tsx","components/Sidebar.tsx","components/DeleteListModal.tsx","components/EditListModal.tsx","components/SelectList.tsx","components/AddNewTask.tsx","components/Tasks.tsx","components/MainContent.tsx","components/EditTaskModal.tsx","components/DeleteTaskModal.tsx","App.tsx","index.tsx"],"names":["timeout","GET_LISTS","GET_LIST_BY_ID","ADD_LIST","DELETE_LIST","UPDATE_LIST","SET_LISTID_TO_DELETE","SET_LIST_TO_EDIT","SET_SELECTED_LIST","ADD_TASK","DELETE_TASK","SET_TASK_TO_DELETE","UNSET_TASK_TO_DELETE","UPDATE_TASK","SET_TASK_TO_EDIT","UNSET_TASK_TO_EDIT","SET_NOTIFICATION","initialState","lists","listIdToDelete","listToEdit","listById","selectedList","taskToDelete","taskToEdit","getListsFromLS","localStorage","getItem","JSON","parse","saveListsToLS","setItem","stringify","message","type","rootReducer","combineReducers","list","state","action","listsFromLS","copiedListsFromLS","payload","id","copiedListsFromLS2","listId","copiedListsFromLS3","name","copiedListsFromLS4","tasks","push","task","copiedListsFromLS5","copiedTasks","find","splice","indexOf","copiedListsFromLS6","copiedList","copiedTasks2","task2","taskId","copiedTask","taskName","completed","taskState","updatedTasks","map","notification","msg","store","createStore","composeWithDevTools","Header","title","subtitle","className","setListIdToDelete","setListToEdit","setNotification","CreateNewList","dispatch","useDispatch","useState","listName","setListName","onSubmit","e","preventDefault","alert","newList","Date","getTime","placeholder","value","onChange","currentTarget","Lists","useSelector","useEffect","Object","keys","length","values","onClick","Sidebar","Notification","clearTimeout","setTimeout","DeleteListModal","hideModalHandler","EditListModal","trim","aria-label","SelectList","AddNewTask","setTaskName","newTask","addTask","Tasks","setTaskToDeleteHandler","setTaskToDelete","setTaskToEditHandler","setTaskToEdit","tasksTable","MainContent","EditTaskModal","setTaskState","closeModalHandler","updateTask","checked","DeleteTaskModal","deleteTask","App","notificationMsg","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.d7b3d98b.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport { FC, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { setNotification } from '../store/actions';\r\nimport { RootState } from '../store/store';\r\n\r\ninterface NotificationProps {\r\n    msg: string;\r\n}\r\n\r\nlet timeout: ReturnType<typeof setTimeout>;\r\n\r\nconst Notification: FC<NotificationProps> = ({ msg }) => {\r\n    const dispatch = useDispatch();\r\n    const type = useSelector((state: RootState) => state.notification.type);\r\n\r\n    useEffect(() => {\r\n        if (msg !== '') {\r\n            if (timeout) {\r\n                clearTimeout(timeout);\r\n            }\r\n            timeout = setTimeout(() => {\r\n                dispatch(setNotification(''));\r\n            }, 3000);\r\n        }\r\n    }, [dispatch, msg]);\r\n\r\n    const closeNotification = () => {\r\n        dispatch(setNotification(''));\r\n        clearTimeout(timeout);\r\n    }\r\n\r\n    return (\r\n        <div className={msg ? `${type === 'danger' ? 'notification is-danger' : 'notification is-primary'}` : 'notification is-hidden'}>\r\n            <button className=\"delete\" onClick={closeNotification}></button>\r\n            <p>{msg}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Notification;","export const GET_LISTS = 'GET_LISTS';\r\nexport const GET_LIST_BY_ID = 'GET_LIST_BY_ID';\r\nexport const ADD_LIST = 'ADD_LIST';\r\nexport const DELETE_LIST = 'DELETE_LIST';\r\nexport const UPDATE_LIST = 'UPDATE_LIST';\r\nexport const SET_LISTID_TO_DELETE = 'SET_LISTID_TO_DELETE';\r\nexport const SET_LIST_TO_EDIT = 'SET_LISTID_TO_EDIT';\r\nexport const SET_SELECTED_LIST = 'SET_SELECTED_LIST';\r\n\r\nexport const ADD_TASK = 'ADD_TASK';\r\nexport const DELETE_TASK = 'DELETE_TASK';\r\nexport const SET_TASK_TO_DELETE = 'SET_TASK_TO_DELETE';\r\nexport const UNSET_TASK_TO_DELETE = 'UNSET_TASK_TO_DELETE';\r\nexport const UPDATE_TASK = 'UPDATE_TASK';\r\nexport const SET_TASK_TO_EDIT = 'SET_TASK_TO_EDIT';\r\nexport const UNSET_TASK_TO_EDIT = 'UNSET_TASK_TO_EDIT';\r\n\r\nexport const SET_NOTIFICATION = 'SET_NOTIFICATION';\r\n\r\nexport interface Task {\r\n    name: string;\r\n    id: string;\r\n    completed: boolean;\r\n}\r\n\r\nexport interface List {\r\n    name: string;\r\n    id: string;\r\n    tasks: Task[];\r\n}\r\n\r\nexport interface Lists {\r\n    [id: string]: List\r\n}\r\n\r\n// Actions\r\ninterface AddListAction {\r\n    type: typeof ADD_LIST;\r\n    payload: List;\r\n}\r\n\r\ninterface GetListsAction {\r\n    type: typeof GET_LISTS;\r\n}\r\n\r\ninterface GetListByIdAction {\r\n    type: typeof GET_LIST_BY_ID;\r\n    payload: string;\r\n}\r\n\r\ninterface SetListIdToDeleteAction {\r\n    type: typeof SET_LISTID_TO_DELETE;\r\n    payload: string;\r\n}\r\n\r\ninterface SetListToEditAction {\r\n    type: typeof SET_LIST_TO_EDIT;\r\n    payload: string;\r\n}\r\n\r\ninterface DeleteListAction {\r\n    type: typeof DELETE_LIST;\r\n    payload: string;\r\n}\r\n\r\ninterface UpdateListAction {\r\n    type: typeof UPDATE_LIST;\r\n    payload: {\r\n        id: string;\r\n        name: string;\r\n    }\r\n}\r\n\r\ninterface SetSelectedListAction {\r\n    type: typeof SET_SELECTED_LIST;\r\n    payload: string;\r\n}\r\n\r\ninterface SetNotificationAction {\r\n    type: typeof SET_NOTIFICATION;\r\n    payload: {\r\n        msg: string;\r\n        type: string;\r\n    };\r\n}\r\n\r\ninterface AddTaskAction {\r\n    type: typeof ADD_TASK;\r\n    payload: {\r\n        task: Task;\r\n        list: List;\r\n    }\r\n}\r\n\r\ninterface DeleteTaskAction {\r\n    type: typeof DELETE_TASK;\r\n    payload: {\r\n        task: Task;\r\n        list: List;\r\n    };\r\n}\r\n\r\ninterface SetTaskToDeleteAction {\r\n    type: typeof SET_TASK_TO_DELETE;\r\n    payload: {\r\n        task: Task;\r\n        list: List;\r\n    };\r\n}\r\n\r\ninterface UnsetTaskToDeleteAction {\r\n    type: typeof UNSET_TASK_TO_DELETE;\r\n}\r\n\r\ninterface EditTaskAction {\r\n    type: typeof UPDATE_TASK;\r\n    payload: {\r\n        taskId: string;\r\n        taskName: string;\r\n        taskState: boolean;\r\n        list: List;\r\n    }\r\n}\r\n\r\ninterface SetTaskToEditAction {\r\n    type: typeof SET_TASK_TO_EDIT;\r\n    payload: {\r\n        task: Task;\r\n        list: List;\r\n    };\r\n}\r\n\r\ninterface UnsetTaskToEditAction {\r\n    type: typeof UNSET_TASK_TO_EDIT;\r\n}\r\n\r\nexport type ListsAction = AddListAction | GetListsAction | GetListByIdAction | SetListIdToDeleteAction |\r\n    SetListToEditAction | DeleteListAction | UpdateListAction | SetSelectedListAction | AddTaskAction | DeleteTaskAction |\r\n    SetTaskToDeleteAction | UnsetTaskToDeleteAction | EditTaskAction | SetTaskToEditAction | UnsetTaskToEditAction;\r\n\r\nexport type NotificationAction = SetNotificationAction;\r\n\r\nexport interface ListState {\r\n    lists: Lists;\r\n    listIdToDelete: string;\r\n    listToEdit: List | null;\r\n    listById: List | null;\r\n    selectedList: List | null;\r\n    taskToDelete: {\r\n        task: Task;\r\n        list: List;\r\n    } | null;\r\n    taskToEdit: {\r\n        task: Task;\r\n        list: List;\r\n    } | null;\r\n}\r\n\r\nexport interface NotificationState {\r\n    message: string;\r\n    type: string;\r\n}","import {\r\n    ListState, ListsAction, Lists, ADD_LIST, GET_LISTS,\r\n    SET_LISTID_TO_DELETE, DELETE_LIST, GET_LIST_BY_ID,\r\n    SET_LIST_TO_EDIT, UPDATE_LIST, SET_SELECTED_LIST,\r\n    ADD_TASK, DELETE_TASK, SET_TASK_TO_DELETE, UNSET_TASK_TO_DELETE,\r\n    SET_TASK_TO_EDIT, UNSET_TASK_TO_EDIT, UPDATE_TASK\r\n} from '../types';\r\n\r\nconst initialState: ListState = {\r\n    lists: {},\r\n    listIdToDelete: '',\r\n    listToEdit: null,\r\n    listById: null,\r\n    selectedList: null,\r\n    taskToDelete: null,\r\n    taskToEdit: null\r\n}\r\n\r\nconst getListsFromLS = (): Lists => {\r\n    if (localStorage.getItem('task_list')) {\r\n        return JSON.parse(localStorage.getItem('task_list') || '{}');\r\n    }\r\n\r\n    return {};\r\n}\r\n\r\nconst saveListsToLS = (lists: Lists) => {\r\n    localStorage.setItem('task_list', JSON.stringify(lists));\r\n}\r\n\r\nexport default (state = initialState, action: ListsAction): ListState => {\r\n    const listsFromLS = getListsFromLS();\r\n\r\n    switch (action.type) {\r\n        case ADD_LIST:\r\n            const copiedListsFromLS = { ...listsFromLS };\r\n            copiedListsFromLS[action.payload.id] = action.payload;\r\n            saveListsToLS(copiedListsFromLS);\r\n            return {\r\n                ...state,\r\n                lists: copiedListsFromLS\r\n            };\r\n\r\n        case GET_LISTS:\r\n            return {\r\n                ...state,\r\n                lists: listsFromLS\r\n            }\r\n\r\n        case GET_LIST_BY_ID:\r\n            const list = listsFromLS[action.payload];\r\n            return {\r\n                ...state,\r\n                listById: list\r\n            }\r\n\r\n        case SET_LISTID_TO_DELETE:\r\n            return {\r\n                ...state,\r\n                listIdToDelete: action.payload\r\n            }\r\n\r\n        case SET_LIST_TO_EDIT:\r\n            const listToEdit = listsFromLS[action.payload] || null;\r\n            return {\r\n                ...state,\r\n                listToEdit: listToEdit\r\n            }\r\n\r\n        case DELETE_LIST:\r\n            const copiedListsFromLS2 = { ...listsFromLS };\r\n            const listId = copiedListsFromLS2[action.payload].id;\r\n            delete copiedListsFromLS2[action.payload];\r\n            saveListsToLS(copiedListsFromLS2);\r\n            return {\r\n                ...state,\r\n                lists: copiedListsFromLS2,\r\n                listIdToDelete: '',\r\n                listById: null,\r\n                selectedList: state.selectedList && listId === state.selectedList.id ? null : state.selectedList\r\n            }\r\n\r\n        case UPDATE_LIST:\r\n            const copiedListsFromLS3 = { ...listsFromLS };\r\n            copiedListsFromLS3[action.payload.id].name = action.payload.name;\r\n            saveListsToLS(copiedListsFromLS3);\r\n            return {\r\n                ...state,\r\n                lists: copiedListsFromLS3,\r\n                listToEdit: null\r\n            }\r\n\r\n        case SET_SELECTED_LIST:\r\n            const selectedList = getListsFromLS()[action.payload];\r\n            return {\r\n                ...state,\r\n                selectedList: selectedList\r\n            }\r\n\r\n        case ADD_TASK:\r\n            const copiedListsFromLS4 = { ...listsFromLS };\r\n            copiedListsFromLS4[action.payload.list.id].tasks.push(action.payload.task);\r\n            saveListsToLS(copiedListsFromLS4);\r\n            return {\r\n                ...state,\r\n                lists: copiedListsFromLS4,\r\n                selectedList: copiedListsFromLS4[action.payload.list.id]\r\n            }\r\n\r\n        case SET_TASK_TO_DELETE:\r\n            return {\r\n                ...state,\r\n                taskToDelete: {\r\n                    task: action.payload.task,\r\n                    list: action.payload.list\r\n                }\r\n            }\r\n\r\n        case UNSET_TASK_TO_DELETE:\r\n            return {\r\n                ...state,\r\n                taskToDelete: null\r\n            }\r\n\r\n        case DELETE_TASK:\r\n            const copiedListsFromLS5 = { ...listsFromLS };\r\n            const copiedTasks = [...copiedListsFromLS5[state.taskToDelete!.list.id].tasks];\r\n            const task = copiedTasks.find(task => task.id === state.taskToDelete!.task.id);\r\n            copiedTasks.splice(copiedTasks.indexOf(task!), 1);\r\n            copiedListsFromLS5[state.taskToDelete!.list.id].tasks = copiedTasks;\r\n            saveListsToLS(copiedListsFromLS5);\r\n            return {\r\n                ...state,\r\n                lists: copiedListsFromLS5,\r\n                selectedList: copiedListsFromLS5[state.taskToDelete!.list.id],\r\n                taskToDelete: null\r\n            }\r\n\r\n        case SET_TASK_TO_EDIT:\r\n            return {\r\n                ...state,\r\n                taskToEdit: {\r\n                    task: action.payload.task,\r\n                    list: action.payload.list\r\n                }\r\n            }\r\n\r\n        case UNSET_TASK_TO_EDIT:\r\n            return {\r\n                ...state,\r\n                taskToEdit: null\r\n            }\r\n\r\n        case UPDATE_TASK:\r\n            const copiedListsFromLS6 = { ...listsFromLS };\r\n            const copiedList = { ...copiedListsFromLS6[action.payload.list.id] };\r\n            const copiedTasks2 = [...copiedList.tasks];\r\n            const task2 = copiedTasks2.find((task) => task.id === action.payload.taskId);\r\n            const copiedTask = { ...task2! };\r\n            copiedTask.name = action.payload.taskName;\r\n            copiedTask.completed = action.payload.taskState;\r\n            const updatedTasks = copiedTasks2.map(task => task.id === copiedTask.id ? copiedTask : task);\r\n            copiedList.tasks = updatedTasks;\r\n            copiedListsFromLS6[copiedList.id] = copiedList;\r\n            saveListsToLS(copiedListsFromLS6);\r\n\r\n            return {\r\n                ...state,\r\n                lists: copiedListsFromLS6,\r\n                selectedList: copiedList,\r\n                taskToEdit: null\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import { SET_NOTIFICATION, NotificationAction, NotificationState } from '../types';\r\n\r\nconst initialState: NotificationState = {\r\n    message: '',\r\n    type: 'success'\r\n}\r\n\r\nexport default (state = initialState, action: NotificationAction): NotificationState => {\r\n    switch (action.type) {\r\n        case SET_NOTIFICATION:\r\n            return {\r\n                ...state,\r\n                message: action.payload.msg,\r\n                type: action.payload.type\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import { createStore, combineReducers } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nimport listReducer from './reducers/listReducer';\r\nimport notificationReducer from './reducers/notificationReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    list: listReducer,\r\n    notification: notificationReducer\r\n});\r\n\r\nconst store = createStore(rootReducer, composeWithDevTools());\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\nexport default store;","import * as React from 'react';\r\nimport { FC } from 'react';\r\n\r\ninterface HeaderProps {\r\n  title: string;\r\n  subtitle?: string;\r\n}\r\n\r\nconst Header: FC<HeaderProps> = ({ title, subtitle }) => {\r\n  return (\r\n    <header className=\"hero has-text-centered is-dark is-bold mb-5\">\r\n      <div className=\"hero-body\">\r\n        <div className=\"container\">\r\n          <h1 className=\"title mb-3\">{title}</h1>\r\n          <h2 className=\"subtitle mt-0\">{subtitle}</h2>\r\n        </div>\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;","import { \r\n  List, ListsAction, Task, ADD_LIST, GET_LISTS,  DELETE_LIST, SET_LISTID_TO_DELETE,\r\n  GET_LIST_BY_ID, SET_LIST_TO_EDIT, UPDATE_LIST, SET_SELECTED_LIST, \r\n  ADD_TASK, SET_TASK_TO_DELETE, DELETE_TASK, UNSET_TASK_TO_DELETE, SET_TASK_TO_EDIT, \r\n  UNSET_TASK_TO_EDIT, UPDATE_TASK\r\n} from '../types';\r\n\r\nexport const addList = (list: List): ListsAction => {\r\n  return {\r\n    type: ADD_LIST,\r\n    payload: list\r\n  }\r\n}\r\n\r\nexport const getLists = (): ListsAction => {\r\n  return {\r\n    type: GET_LISTS\r\n  }\r\n}\r\n\r\nexport const getListById = (id: string): ListsAction => {\r\n  return {\r\n    type: GET_LIST_BY_ID,\r\n    payload: id\r\n  }\r\n}\r\n\r\nexport const setListIdToDelete = (id: string): ListsAction => {\r\n  return {\r\n    type: SET_LISTID_TO_DELETE,\r\n    payload: id\r\n  }\r\n}\r\n\r\nexport const setListToEdit = (id: string): ListsAction => {\r\n  return {\r\n    type: SET_LIST_TO_EDIT,\r\n    payload: id\r\n  }\r\n}\r\n\r\nexport const setSelectedList = (id: string): ListsAction => {\r\n  return {\r\n    type: SET_SELECTED_LIST,\r\n    payload: id\r\n  }\r\n}\r\n\r\nexport const deleteList = (id: string): ListsAction => {\r\n  return {\r\n    type: DELETE_LIST,\r\n    payload: id\r\n  }\r\n}\r\n\r\nexport const updateList = (id: string, name: string): ListsAction => {\r\n  return {\r\n    type: UPDATE_LIST,\r\n    payload: {\r\n      id,\r\n      name\r\n    }\r\n  }\r\n}\r\n\r\nexport const addTask = (task: Task, list: List): ListsAction => {\r\n  return {\r\n    type: ADD_TASK,\r\n    payload: {\r\n      task,\r\n      list\r\n    }\r\n  }\r\n}\r\n\r\nexport const setTaskToDelete = (task: Task, list: List): ListsAction => {\r\n  return {\r\n    type: SET_TASK_TO_DELETE,\r\n    payload: {\r\n      task,\r\n      list\r\n    }\r\n  }\r\n}\r\n\r\nexport const unsetTaskToDelete = (): ListsAction => {\r\n  return {\r\n    type: UNSET_TASK_TO_DELETE\r\n  }\r\n}\r\n\r\nexport const deleteTask = (task: Task, list: List): ListsAction => {\r\n  return {\r\n    type: DELETE_TASK,\r\n    payload: {\r\n      task,\r\n      list\r\n    }\r\n  }\r\n}\r\n\r\nexport const setTaskToEdit = (task: Task, list: List): ListsAction => {\r\n  return {\r\n    type: SET_TASK_TO_EDIT,\r\n    payload: {\r\n      task,\r\n      list\r\n    }\r\n  }\r\n}\r\n\r\nexport const unsetTaskToEdit = (): ListsAction => {\r\n  return {\r\n    type: UNSET_TASK_TO_EDIT\r\n  }\r\n}\r\n\r\nexport const updateTask = (taskId: string, taskName: string, taskState: boolean, list: List): ListsAction => {\r\n  return {\r\n    type: UPDATE_TASK,\r\n    payload: {\r\n      taskId,\r\n      taskName,\r\n      taskState,\r\n      list\r\n    }\r\n  }\r\n}","import { SET_NOTIFICATION, NotificationAction } from '../types';\r\n\r\nexport const setNotification = (msg: string, type: string = 'success'): NotificationAction => {\r\n    return {\r\n        type: SET_NOTIFICATION,\r\n        payload: {\r\n            msg,\r\n            type\r\n        }\r\n    }\r\n}","import * as React from 'react';\r\nimport { FC, FormEvent, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { addList, setNotification } from '../store/actions';\r\nimport { List } from '../store/types';\r\n\r\nconst CreateNewList: FC = () => {\r\n    const dispatch = useDispatch();\r\n    const [listName, setListName] = useState<string>('');\r\n\r\n    const inputChangeHandler = (e: FormEvent<HTMLInputElement>) => {\r\n        setListName(e.currentTarget.value);\r\n    }\r\n\r\n    const submitHandler = (e: FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n\r\n        if (listName === '') {\r\n            return alert('List name is required!');\r\n        }\r\n\r\n        const newList: List = {\r\n            id: `list-${new Date().getTime()}`,\r\n            name: listName,\r\n            tasks: []\r\n        };\r\n\r\n        dispatch(addList(newList));\r\n        dispatch(setNotification(`New list(\"${newList.name}\") created`));\r\n        setListName('');\r\n    }\r\n\r\n    return (\r\n        <div className=\"card mb-5\">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">Create New List</p>\r\n            </div>\r\n            <div className=\"card-content\">\r\n                <form onSubmit={submitHandler}>\r\n                    <div className=\"field\">\r\n                        <label className=\"label\">List Name</label>\r\n                        <div className=\"control\">\r\n                            <input\r\n                                className=\"input\"\r\n                                type=\"text\"\r\n                                placeholder=\"List Name\"\r\n                                name=\"listname\"\r\n                                value={listName}\r\n                                onChange={inputChangeHandler}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"control\">\r\n                        <button type=\"submit\" className=\"button is-primary\">Create</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CreateNewList;","import * as React from 'react';\r\nimport { FC, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getLists, setListIdToDelete, setListToEdit } from '../store/actions';\r\nimport { RootState } from '../store/store';\r\nimport { List } from '../store/types';\r\n\r\nconst Lists: FC = () => {\r\n    const dispatch = useDispatch();\r\n    const lists = useSelector((state: RootState) => state.list.lists);\r\n\r\n    useEffect(() => {\r\n        dispatch(getLists());\r\n    }, [dispatch]);\r\n\r\n    const setListIdToDeleteHandler = (id: string) => {\r\n        dispatch(setListIdToDelete(id));\r\n    }\r\n\r\n    const setListToEditHandler = (id: string) => {\r\n        dispatch(setListToEdit(id));\r\n    }\r\n\r\n    return (\r\n        <div className= \"panel is-primary\" >\r\n        <p className=\"panel-heading\" > Your lists </p>\r\n            < div id = \"lists-wrapper\" >\r\n                {\r\n                    Object.keys(lists).length === 0\r\n                        ?\r\n                        <p id=\"no-lists\" className = \"py-4 has-text-centered\" > No Lists</ p >\r\n          :\r\n<div id=\"task-lists\" >\r\n{\r\n    Object.values(lists).map((list: List) => {\r\n        return <div className=\"panel-block py-3\" key = { list.id } >\r\n            <p onClick={ () => setListToEditHandler(list.id) }> { list.name } </p>\r\n                <span className = \"panel-icon has-text-danger\" onClick = {() => setListIdToDeleteHandler(list.id)\r\n    }>\r\n    <i className=\"fas fa-times-circle\" > </i>\r\n    </span>\r\n    </div>\r\n              })}\r\n</div>\r\n        }\r\n</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Lists;","import * as React from 'react';\r\nimport { FC } from 'react';\r\n\r\nimport CreateNewList from './CreateNewList';\r\nimport Lists from './Lists';\r\n\r\nconst Sidebar: FC = () => {\r\n    return (\r\n        <div className=\"column is-3\">\r\n            <CreateNewList />\r\n            <Lists />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Sidebar;","import * as React from 'react';\r\nimport { FC, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { setListIdToDelete, deleteList, getListById, setNotification } from '../store/actions';\r\nimport { RootState } from '../store/store';\r\n\r\ninterface DeleteListModalProps {\r\n    listId: string;\r\n}\r\n\r\nconst DeleteListModal: FC<DeleteListModalProps> = ({ listId }) => {\r\n    const dispatch = useDispatch();\r\n    const list = useSelector((state: RootState) => state.list.listById);\r\n\r\n    useEffect(() => {\r\n        dispatch(getListById(listId));\r\n    }, [dispatch, listId]);\r\n\r\n    const deleteListHandler = () => {\r\n        dispatch(deleteList(listId));\r\n        if (list) {\r\n            dispatch(setNotification(`List \"${list.name}\" deleted!`, 'danger'));\r\n        }\r\n    }\r\n\r\n    const hideModalHandler = () => {\r\n        dispatch(setListIdToDelete(''));\r\n    }\r\n\r\n    return (\r\n        <div className=\"modal is-active\">\r\n            <div className=\"modal-background close-modal\" onClick={hideModalHandler}></div>\r\n            <div className=\"modal-card\">\r\n                <header className=\"modal-card-head has-text-centered\">\r\n                    <p className=\"modal-card-title\">Are you sure you want to delete this list ?</p>\r\n                </header>\r\n                <div className=\"modal-card-body\">\r\n                    <h2 className=\"is-size-5 has-text-centered\">All tasks related to this list will be deleted</h2>\r\n                    <div className=\"content\">\r\n                        {list?.tasks.length === 0 ?\r\n                            <p className=\"has-text-centered pt-4 mb-0\">No tasks in this list!</p>\r\n                            :\r\n                            <ul>\r\n                                {list?.tasks.map(task => (\r\n                                    <li key={task.id}>{task.name}</li>\r\n                                ))}\r\n                            </ul>\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <footer className=\"modal-card-foot\">\r\n                    <button type=\"submit\" className=\"button is-danger\" onClick={deleteListHandler}>Delete</button>\r\n                    <button type=\"button\" className=\"button close-modal\" onClick={hideModalHandler}>Cancel</button>\r\n                </footer>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DeleteListModal;","import * as React from 'react';\r\nimport { FC, useState, FormEvent } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { setListToEdit, updateList, setNotification } from '../store/actions';\r\nimport { List } from '../store/types';\r\n\r\ninterface EditListModalProps {\r\n    list: List;\r\n}\r\n\r\nconst EditListModal: FC<EditListModalProps> = ({ list }) => {\r\n    const dispatch = useDispatch();\r\n    const [listName, setListName] = useState(list.name);\r\n\r\n    const hideModalHandler = () => {\r\n        dispatch(setListToEdit(''));\r\n    }\r\n\r\n    const changeHandler = (e: FormEvent<HTMLInputElement>) => {\r\n        setListName(e.currentTarget.value);\r\n    }\r\n\r\n    const submitHandler = (e: FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n\r\n        if (listName.trim() === '') {\r\n            return alert('List name is required!');\r\n        }\r\n\r\n        if (listName.trim() === list.name) {\r\n            return alert('List name is the same as before!');\r\n        }\r\n\r\n        dispatch(updateList(list.id, listName.trim()));\r\n        dispatch(setNotification(`List \"${list.name}\" updated!`));\r\n    }\r\n\r\n    return (\r\n        <div className=\"modal is-active\">\r\n            <div className=\"modal-background close-modal\" onClick={hideModalHandler}></div>\r\n            <form className=\"modal-card\" onSubmit={submitHandler}>\r\n                <header className=\"modal-card-head\">\r\n                    <p className=\"modal-card-title\">Edit List</p>\r\n                    <button type=\"button\" className=\"delete close-modal\" aria-label=\"close\" onClick={hideModalHandler}></button>\r\n                </header>\r\n                <div className=\"modal-card-body\">\r\n                    <div className=\"field\">\r\n                        <label className=\"label\">List Name</label>\r\n                        <div className=\"control\">\r\n                            <input type=\"text\" className=\"input\" name=\"listname\" placeholder=\"List Name\" value={listName} onChange={changeHandler} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <footer className=\"modal-card-foot\">\r\n                    <button type=\"submit\" className=\"button is-success\">Save changes</button>\r\n                    <button type=\"button\" className=\"button close-modal\" onClick={hideModalHandler}>Cancel</button>\r\n                </footer>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EditListModal;","import * as React from 'react';\r\nimport { FC, FormEvent } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { List } from '../store/types';\r\nimport { setSelectedList } from '../store/actions';\r\nimport { RootState } from '../store/store';\r\n\r\nconst SelectList: FC = () => {\r\n    const dispatch = useDispatch();\r\n    const lists = useSelector((state: RootState) => state.list.lists);\r\n\r\n    const selectChangeHandler = (e: FormEvent<HTMLSelectElement>) => {\r\n        dispatch(setSelectedList(e.currentTarget.value));\r\n    }\r\n\r\n    return (\r\n        <section>\r\n            <h2 className=\"is-size-4 has-text-centered mb-4\">Choose a list</h2>\r\n            <div className=\"field mb-5\">\r\n                <div className=\"control has-icons-left\">\r\n                    <div className=\"select fullwidth\">\r\n                        <select className=\"fullwidth\" onChange={selectChangeHandler}>\r\n                            <option value=\"\">Select List</option>\r\n                            {Object.keys(lists).length > 0 &&\r\n                                Object.values(lists).map((list: List) => (\r\n                                    <option key={list.id} value={list.id}>{list.name}</option>\r\n                                ))\r\n                            }\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-list\"></i>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default SelectList;","import * as React from 'react';\r\nimport { FC, useState, FormEvent } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { List, Task } from '../store/types';\r\nimport { addTask, setNotification } from '../store/actions';\r\n\r\ninterface AddNewTaskProps {\r\n    list: List;\r\n}\r\n\r\nconst AddNewTask: FC<AddNewTaskProps> = ({ list }) => {\r\n    const dispatch = useDispatch();\r\n    const [taskName, setTaskName] = useState('');\r\n\r\n    const changeHandler = (e: FormEvent<HTMLInputElement>) => {\r\n        setTaskName(e.currentTarget.value);\r\n    }\r\n\r\n    const submitHandler = (e: FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n\r\n        if (taskName.trim() === '') {\r\n            return alert('Task name is required!');\r\n        }\r\n\r\n        const newTask: Task = {\r\n            name: taskName,\r\n            id: `task-${new Date().getTime()}`,\r\n            completed: false\r\n        }\r\n\r\n        dispatch(addTask(newTask, list));\r\n        dispatch(setNotification(`New task created(\"${newTask.name}\")!`));\r\n        setTaskName('');\r\n    }\r\n\r\n    return (\r\n        <section className=\"section\">\r\n            <h2 className=\"is-size-4 has-text-centered\">Add new task to selected field</h2>\r\n            <form onSubmit={submitHandler}>\r\n                <div className=\"field\">\r\n                    <label className=\"label\">Task Name</label>\r\n                    <div className=\"control\">\r\n                        <input type=\"text\" className=\"input\" placeholder=\"Add Task\" value={taskName} onChange={changeHandler} />\r\n                    </div>\r\n                    <div className=\"control mt-4\">\r\n                        <input type=\"submit\" value=\"Add New Task\" className=\"button is-primary\" />\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default AddNewTask;","import * as React from 'react';\r\nimport { FC } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { Task } from '../store/types';\r\nimport { setTaskToDelete, setTaskToEdit } from '../store/actions';\r\nimport { RootState } from '../store/store';\r\n\r\ninterface TasksProps {\r\n    tasks: Task[];\r\n}\r\n\r\nconst Tasks: FC<TasksProps> = ({ tasks }) => {\r\n    const dispatch = useDispatch();\r\n    const list = useSelector((state: RootState) => state.list.selectedList!);\r\n\r\n    const setTaskToDeleteHandler = (task: Task) => {\r\n        dispatch(setTaskToDelete(task, list));\r\n    }\r\n\r\n    const setTaskToEditHandler = (task: Task) => {\r\n        dispatch(setTaskToEdit(task, list));\r\n    }\r\n\r\n    const tasksTable = (\r\n        <table id=\"tasks-table\" className=\"table is-fullwidth is-striped\">\r\n            <thead>\r\n                <tr>\r\n                    <th>Task</th>\r\n                    <th className=\"has-text-centered\">Edit</th>\r\n                    <th className=\"has-text-centered\">Delete</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {tasks.map((task: Task) => (\r\n                    <tr key={task.id} className={task.completed ? 'completed' : ''}>\r\n                        <td>{task.name}</td>\r\n                        <td className=\"has-text-centered\">\r\n                            <button className=\"button is-primary is-small\" onClick={() => setTaskToEditHandler(task)}>\r\n                                <span className=\"icon\">\r\n                                    <i className=\"fas fa-edit\"></i>\r\n                                </span>\r\n                            </button>\r\n                        </td>\r\n                        <td className=\"has-text-centered\">\r\n                            <button className=\"button is-danger is-small\" onClick={() => setTaskToDeleteHandler(task)}>\r\n                                <span className=\"icon\">\r\n                                    <i className=\"fas fa-times\"></i>\r\n                                </span>\r\n                            </button>\r\n                        </td>\r\n                    </tr>\r\n                ))}\r\n            </tbody>\r\n        </table>\r\n    );\r\n\r\n    return (\r\n        <section className=\"section\">\r\n            <h2 className=\"is-size-4 has-text-centered\">List of tasks in selected list</h2>\r\n            {tasks.length === 0 ? <p id=\"no-tasks\" className=\"py-4 has-text-centered\">No Tasks</p> : tasksTable}\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default Tasks;","import * as React from 'react';\r\nimport { FC, Fragment } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport SelectList from './SelectList';\r\nimport AddNewTask from './AddNewTask';\r\nimport Tasks from './Tasks';\r\nimport { RootState } from '../store/store';\r\n\r\nconst MainContent: FC = () => {\r\n    const selectedList = useSelector((state: RootState) => state.list.selectedList);\r\n\r\n    return (\r\n        <div className=\"column is-9\">\r\n            <div className=\"box\">\r\n                <SelectList />\r\n                {\r\n                    selectedList &&\r\n                    <Fragment>\r\n                        <AddNewTask list={selectedList} />\r\n                        <hr />\r\n                        <Tasks tasks={selectedList.tasks} />\r\n                    </Fragment>\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MainContent;","import * as React from 'react';\r\nimport { FC, FormEvent, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { Task, List } from '../store/types';\r\nimport { updateTask, unsetTaskToEdit, setNotification } from '../store/actions';\r\n\r\ninterface EditTaskModalProps {\r\n    taskToEdit: {\r\n        task: Task;\r\n        list: List;\r\n    }\r\n}\r\n\r\nconst EditTaskModal: FC<EditTaskModalProps> = ({ taskToEdit: { task, list } }) => {\r\n    const dispatch = useDispatch();\r\n    const [taskName, setTaskName] = useState(task.name);\r\n    const [taskState, setTaskState] = useState(task.completed);\r\n\r\n    const nameChangeHandler = (e: FormEvent<HTMLInputElement>) => {\r\n        setTaskName(e.currentTarget.value);\r\n    }\r\n\r\n    const stateChangeHandler = (e: FormEvent<HTMLInputElement>) => {\r\n        setTaskState(e.currentTarget.checked);\r\n    }\r\n\r\n    const submitHandler = (e: FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n\r\n        if (taskName === '') {\r\n            return alert('Task name is required!');\r\n        }\r\n\r\n        if (taskName === task.name && taskState === task.completed) {\r\n            return alert('Task name and state are same as before!');\r\n        }\r\n\r\n        dispatch(updateTask(task.id, taskName, taskState, list));\r\n        dispatch(setNotification(`Task \"${task.name}\" updated!`));\r\n    }\r\n\r\n    const closeModalHandler = () => {\r\n        dispatch(unsetTaskToEdit());\r\n    }\r\n\r\n    return (\r\n        <div className=\"modal is-active\">\r\n            <div className=\"modal-background close-modal\" onClick={closeModalHandler}></div>\r\n            <form className=\"modal-card\" onSubmit={submitHandler}>\r\n                <header className=\"modal-card-head\">\r\n                    <p className=\"modal-card-title\">Edit Task</p>\r\n                    <button type=\"button\" className=\"delete modal-close\" aria-label=\"close\" onClick={closeModalHandler}></button>\r\n                </header>\r\n                <div className=\"modal-card-body\">\r\n                    <div className=\"field\">\r\n                        <label className=\"label\">Task Name</label>\r\n                        <div className=\"control\">\r\n                            <input type=\"text\" className=\"input\" name=\"taskname\" placeholder=\"Task Name\" value={taskName} onChange={nameChangeHandler} />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"field\">\r\n                        <label className=\"label\">Complete task</label>\r\n                        <label className=\"checkbox\">\r\n                            <input type=\"checkbox\" name=\"taskstate\" checked={taskState} onChange={stateChangeHandler} />\r\n                            {' '}Complete\r\n          </label>\r\n                    </div>\r\n                </div>\r\n                <footer className=\"modal-card-foot\">\r\n                    <button type=\"submit\" className=\"button is-success\">Save changes</button>\r\n                    <button type=\"button\" className=\"button close-modal\" onClick={closeModalHandler}>Cancel</button>\r\n                </footer>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EditTaskModal;","import * as React from 'react';\r\nimport { FC } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { Task, List } from '../store/types';\r\nimport { unsetTaskToDelete, deleteTask, setNotification } from '../store/actions';\r\n\r\ninterface DeleteTaskModalProps {\r\n    taskToDelete: {\r\n        task: Task;\r\n        list: List;\r\n    }\r\n}\r\n\r\nconst DeleteTaskModal: FC<DeleteTaskModalProps> = ({ taskToDelete: { task, list } }) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const deleteHandler = () => {\r\n        dispatch(deleteTask(task, list));\r\n        dispatch(setNotification(`Task \"${task.name}\" deleted!`, 'danger'));\r\n    }\r\n\r\n    const closeModalHandler = () => {\r\n        dispatch(unsetTaskToDelete());\r\n    }\r\n\r\n    return (\r\n        <div className=\"modal is-active\">\r\n            <div className=\"modal-background close-modal\" onClick={closeModalHandler}></div>\r\n            <div className=\"modal-card\">\r\n                <header className=\"modal-card-head has-text-centered\">\r\n                    <p className=\"modal-card-title\">Are you sure you want to delete this task ?</p>\r\n                </header>\r\n                <footer className=\"modal-card-foot\">\r\n                    <button type=\"submit\" className=\"button is-danger\" onClick={deleteHandler}>Delete</button>\r\n                    <button type=\"button\" className=\"button close-modal\" onClick={closeModalHandler}>Cancel</button>\r\n                </footer>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DeleteTaskModal;","import * as React from 'react';\nimport { FC } from 'react';\nimport { useSelector } from 'react-redux';\nimport './App.css';\n\nimport Header from './components/Header';\nimport Sidebar from './components/Sidebar';\nimport Notification from './components/Notification';\nimport { RootState } from './store/store';\nimport DeleteListModal from './components/DeleteListModal';\nimport EditListModal from './components/EditListModal';\nimport MainContent from './components/MainContent';\nimport EditTaskModal from './components/EditTaskModal';\nimport DeleteTaskModal from './components/DeleteTaskModal';\n\nconst App: FC = () => {\n    const notificationMsg = useSelector((state: RootState) => state.notification.message);\n    const listIdToDelete = useSelector((state: RootState) => state.list.listIdToDelete);\n    const listToEdit = useSelector((state: RootState) => state.list.listToEdit);\n    const taskToEdit = useSelector((state: RootState) => state.list.taskToEdit);\n    const taskToDelete = useSelector((state: RootState) => state.list.taskToDelete);\n\n    return (\n        <div className=\"App\">\n            <Header title=\"Todo List App\" subtitle=\"Create some lists and add some tasks to each list\" />\n\n            <div className=\"container px-5\">\n                <div className=\"columns\">\n                    <Sidebar />\n                    <MainContent />\n                </div>\n            </div>\n\n            <Notification msg={notificationMsg} />\n            {listIdToDelete && <DeleteListModal listId={listIdToDelete} />}\n            {listToEdit && <EditListModal list={listToEdit} />}\n            {taskToEdit && <EditTaskModal taskToEdit={taskToEdit} />}\n            {taskToDelete && <DeleteTaskModal taskToDelete={taskToDelete} />}\n        </div>\n    );\n}\n\nexport default App;\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport '../node_modules/bulma/css/bulma.min.css';\nimport '../node_modules/@fortawesome/fontawesome-free/css/all.min.css';\n\nimport store from './store/store';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);"],"sourceRoot":""}